#!/bin/bash

# =============================================================================
# Script para Actualizar M√©tricas de NLLB Autom√°ticamente
# =============================================================================

# Configuraci√≥n
BACKEND_URL="http://localhost:3002"
METRICS_ENDPOINT="$BACKEND_URL/api/metrics/nllb/update"
LOG_FILE="/var/log/nllb-metrics-update.log"
RETRY_COUNT=3
RETRY_DELAY=10
SUCCESS_COUNT=0
FAILURE_COUNT=0

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Funci√≥n para logging
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a $LOG_FILE
}

# Funci√≥n para mostrar mensajes con colores
print_message() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
    log "$message"
}

# Funci√≥n para verificar si el backend est√° disponible
check_backend_health() {
    local health_endpoint="$BACKEND_URL/api/health"
    
    print_message $BLUE "üîç Verificando salud del backend..."
    
    if curl -s "$health_endpoint" > /dev/null 2>&1; then
        print_message $GREEN "‚úÖ Backend est√° disponible"
        return 0
    else
        print_message $RED "‚ùå Backend no est√° disponible en $BACKEND_URL"
        return 1
    fi
}

# Funci√≥n para actualizar m√©tricas con reintentos
update_metrics_with_retry() {
    local attempt=1
    
    while [ $attempt -le $RETRY_COUNT ]; do
        print_message $BLUE "üìä Actualizando m√©tricas NLLB (Intento $attempt/$RETRY_COUNT)..."
        
        # Realizar la petici√≥n HTTP
        response=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -w "|||%{http_code}" \
            "$METRICS_ENDPOINT" 2>&1)
        
        http_code=$(echo "$response" | grep -o '[0-9]*$')
        response_body=$(echo "$response" | sed 's/|||[0-9]*$//')
        
        if [ "$http_code" -eq 200 ] || [ "$http_code" -eq 201 ]; then
            print_message $GREEN "‚úÖ M√©tricas NLLB actualizadas exitosamente"
            
            # Parsear y mostrar informaci√≥n relevante
            if command -v jq &> /dev/null; then
                total_translations=$(echo "$response_body" | jq -r '.nllb_analytics.total_translations // "N/A"')
                avg_confidence=$(echo "$response_body" | jq -r '.nllb_analytics.average_confidence // "N/A"')
                cache_hit_rate=$(echo "$response_body" | jq -r '.nllb_analytics.cache_hit_rate // "N/A"')
                overall_quality=$(echo "$response_body" | jq -r '.nllb_analytics.overall_quality // "N/A"')
                
                print_message $GREEN "üìà Estad√≠sticas Actualizadas:"
                print_message $GREEN "   ‚Ä¢ Total de traducciones: $total_translations"
                print_message $GREEN "   ‚Ä¢ Confianza promedio: $avg_confidence"
                print_message $GREEN "   ‚Ä¢ Tasa de cache hits: $cache_hit_rate%"
                print_message $GREEN "   ‚Ä¢ Calidad general: $overall_quality"
            fi
            
            SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            return 0
        else
            print_message $RED "‚ùå Error HTTP $http_code al actualizar m√©tricas"
            log "Response body: $response_body"
            
            if [ $attempt -lt $RETRY_COUNT ]; then
                print_message $YELLOW "‚è≥ Esperando $RETRY_DELAY segundos antes del siguiente intento..."
                sleep $RETRY_DELAY
            fi
        fi
        
        attempt=$((attempt + 1))
    done
    
    FAILURE_COUNT=$((FAILURE_COUNT + 1))
    print_message $RED "‚ùå Fall√≥ la actualizaci√≥n de m√©tricas despu√©s de $RETRY_COUNT intentos"
    return 1
}

# Funci√≥n para mostrar estad√≠sticas
show_statistics() {
    print_message $BLUE "üìä Estad√≠sticas de ejecuci√≥n:"
    print_message $GREEN "   ‚Ä¢ Actualizaciones exitosas: $SUCCESS_COUNT"
    print_message $RED "   ‚Ä¢ Actualizaciones fallidas: $FAILURE_COUNT"
    print_message $BLUE "   ‚Ä¢ Total de intentos: $((SUCCESS_COUNT + FAILURE_COUNT))"
}

# Funci√≥n principal
main() {
    print_message $BLUE "üöÄ Iniciando actualizaci√≥n de m√©tricas NLLB..."
    print_message $BLUE "   ‚Ä¢ Endpoint: $METRICS_ENDPOINT"
    print_message $BLUE "   ‚Ä¢ Log file: $LOG_FILE"
    print_message $BLUE "   ‚Ä¢ Reintentos: $RETRY_COUNT"
    
    # Verificar que el backend est√© disponible
    if ! check_backend_health; then
        print_message $RED "‚ùå No se puede continuar sin el backend disponible"
        exit 1
    fi
    
    # Actualizar m√©tricas
    if update_metrics_with_retry; then
        print_message $GREEN "‚úÖ Actualizaci√≥n completada exitosamente"
        exit 0
    else
        print_message $RED "‚ùå La actualizaci√≥n fall√≥"
        exit 1
    fi
}

# Funci√≥n para modo daemon/continuo
daemon_mode() {
    local interval=${1:-300} # 5 minutos por defecto
    
    print_message $BLUE "üîÑ Iniciando modo daemon con intervalo de $interval segundos"
    
    while true; do
        main
        show_statistics
        print_message $BLUE "‚è∞ Esperando $interval segundos hasta la pr√≥xima actualizaci√≥n..."
        sleep $interval
    done
}

# Manejo de argumentos
case "${1:-}" in
    "daemon")
        daemon_mode ${2:-300}
        ;;
    "once")
        main
        ;;
    "help"|"-h"|"--help")
        echo "Uso: $0 [comando] [opciones]"
        echo ""
        echo "Comandos:"
        echo "  once              Ejecutar una sola vez (por defecto)"
        echo "  daemon [interval] Ejecutar continuamente cada [interval] segundos (por defecto: 300)"
        echo "  help              Mostrar esta ayuda"
        echo ""
        echo "Ejemplos:"
        echo "  $0                    # Ejecutar una vez"
        echo "  $0 once               # Ejecutar una vez"
        echo "  $0 daemon             # Ejecutar cada 5 minutos"
        echo "  $0 daemon 120         # Ejecutar cada 2 minutos"
        ;;
    *)
        main
        ;;
esac 